cmake_minimum_required(VERSION 3.10)
if (${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.15.0")
    cmake_policy(SET CMP0092 NEW)
endif ()
project(OpenCLParser C CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 99)

find_package(LLVM REQUIRED)

if (MINGW AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options("-Wa,-mbig-obj")
endif ()

if (DEFINED SANITIZER)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=${SANITIZER}")
endif ()

option(BUILD_TESTS "Build tests" ON)

if (WIN32)
    if (NOT MSVC)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--stack,8000000")
    else ()
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:8000000")
    endif ()
endif ()

include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})
include_directories(SYSTEM 3rdParty)
include_directories(src)
message(STATUS ${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})

if (NOT MSVC)
    find_package(Threads REQUIRED)
    link_libraries(Threads::Threads)
    add_compile_options(-pedantic -Wall -Wextra -Wno-unknown-pragmas -Wnon-virtual-dtor)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        add_compile_options(-fcolor-diagnostics)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        add_compile_options(-fdiagnostics-color=always)
    endif ()
    option(COVERAGE "Compile with coverage" OFF)

    if (COVERAGE)
        message(STATUS "Compiling with Coverage")
        if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            add_compile_options(--coverage)
            if (WIN32)
                link_libraries(gcov)
            endif ()
        elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
            add_compile_options(-fprofile-instr-generate -fcoverage-mapping)
            add_link_options(-fprofile-instr-generate)
            if (WIN32 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS "9.0.0")
                link_libraries(clang_rt.profile-x86_64)
            endif ()
        else ()
            message(ERROR "Unknown coverage implementation")
        endif ()
    endif ()
else ()
    add_compile_options(/bigobj /permissive /W4 /wd4068 /Zc:__cplusplus /utf-8)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
endif ()

llvm_map_components_to_libnames(llvm_libs Core ExecutionEngine MC MCJIT Object OrcJit Option RuntimeDyld Support native)

add_subdirectory(src/CompilerCore)

add_executable(OpenCLParser src/main.cpp)
target_link_libraries(OpenCLParser CompilerCore Frontend)
target_compile_definitions(OpenCLParser PUBLIC __STDC_FORMAT_MACROS)

if (${BUILD_TESTS})
    if (FUZZER AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND NOT MINGW)
        add_subdirectory(src/Fuzzer)
    else ()
        add_subdirectory(src/Tests)
    endif ()
endif ()
