cmake_minimum_required(VERSION 3.10)
project(OpenCLParser C CXX)
if (WIN32)
    set(MGPKG_ROOT "$ENV{USERPROFILE}/.mgpkg")
else ()
    set(MGPKG_ROOT "$ENV{HOME}/.mgpkg")
endif ()
list(APPEND CMAKE_PREFIX_PATH ${MGPKG_ROOT}/LLVM-r-8.0.0)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 99)

find_package(LLVM REQUIRED)

if (MINGW AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options("-Wa,-mbig-obj")
endif ()

if (DEFINED SANITIZER)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=${SANITIZER}")
endif ()

if (WIN32)
    add_compile_definitions(_WIN32_WINNT=0x0600 WINVER=0x0600)
endif ()

option(BUILD_TESTS "Build tests" ON)

include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})
include_directories(SYSTEM 3rdParty)
include_directories(src)
message(STATUS ${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})
if (MINGW AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" AND "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    add_compile_options(-fno-limit-debug-info)
endif ()

if (NOT MSVC)
    find_package(Threads REQUIRED)
    link_libraries(Threads::Threads)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra -fdiagnostics-color=always -Wno-unknown-pragmas -Wnon-virtual-dtor")
    option(COVERAGE "Compile with coverage" OFF)

    if (COVERAGE)
        message(STATUS "Compiling with Coverage")
        if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            add_compile_options(--coverage)
            link_libraries(gcov)
        elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
            add_compile_options(-fprofile-instr-generate -fcoverage-mapping)
            add_link_options(-fprofile-instr-generate)
            link_libraries(clang_rt.profile-x86_64)
        else ()
            message(ERROR "Unknown coverage implementation")
        endif ()

    endif ()
else ()
    if (${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.15.0")
        cmake_policy(CMP0092 NEW)
    endif ()
    add_compile_options(/w34716 /bigobj /permissive /W4 /w14640 /wd4068)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
endif ()

llvm_map_components_to_libnames(llvm_libs Core ExecutionEngine MC MCJIT Object OrcJit Option RuntimeDyld Support native)

add_subdirectory(src/CompilerCore)

add_executable(OpenCLParser src/main.cpp)
target_link_libraries(OpenCLParser CompilerCore Frontend)
target_compile_definitions(OpenCLParser PUBLIC __STDC_FORMAT_MACROS)

add_executable(DemoC src/input.c)

if (${BUILD_TESTS})
    add_subdirectory(src/Tests)
endif ()
